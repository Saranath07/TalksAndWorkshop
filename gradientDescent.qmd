---
title: "Gradient Descent Animation"
format: html
jupyter: python3
---

```{python}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Define the function and its derivative
def func(x):
    return np.sin(x)

def grad(x):
    return np.cos(x)

# Generate data for the curve
x = np.linspace(-2*np.pi, 2*np.pi, 400)
y = func(x)

# Set up the figure and axis
fig, ax = plt.subplots()
ax.plot(x, y, 'k', linewidth=1)
ball, = ax.plot([], [], 'go', markersize=10)
line, = ax.plot([], [], 'r', linewidth=1)

# Initialize the plot elements
def init():
    ball.set_data([], [])
    line.set_data([], [])
    return ball, line

# Update function for animation
def update(frame):
    x_data = x[frame]
    y_data = func(x_data)
    ball.set_data(x_data, y_data)

    # Gradient descent step
    grad_value = grad(x_data)
    new_x_data = x_data - 0.1 * grad_value  # Step size 0.1
    new_y_data = func(new_x_data)
    
    # Update line
    line.set_data([x_data, new_x_data], [y_data, new_y_data])
    
    return ball, line

# Create animation
ani = FuncAnimation(fig, update, frames=np.arange(len(x)), init_func=init, blit=True, repeat=False)

# Save the animation
ani.save('/mnt/data/gradient_descent.mp4', writer='ffmpeg', dpi=300)

plt.show()
